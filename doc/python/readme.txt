基于python3:
    1.    1/2=0.5    1%2=1
    2.    丢弃小数部分 1//2=0，10//3=3，  -10//3 = -4
    3。   x%y = x- ((x//y)*y)
    4.    使用python变量之前，必须给python变量赋值，他没有默认值
模块   倒入模块 import [模块名]，import的变种 from [模块名] import [函数名]
      事实上可以使用变量来引用函数(一起其他大部分Python元素)，执行赋值语句foo=math.sqrt后就可以使用foo来计算平方根，例如foo(4)的结果为2。-

      cmath和复数：
      from math import sqrt
      sqrt(-1)
      会报错

      由于复数的平方根为叙述，由实部和虚部组成的数为复数。Python标准库提供来一个专门用于处理复数的模块
      import cmath
      cmath.sqrt(-1)
      1j
       python中虚数以j结尾,另外python中没有专门表述虚数的类型，而将虚数视为实部为0的复数

python是交互式的解释器。
        字符串表示：
            str: 展示真正的字符串，转义字符会生效
            repr: 展示原始字符，转义字符不生效  repr("let's go") = repr("let\'s go") = "let\'s go"
            长字符串（跨越多行的字符串）用 '''  ''' 来表示 还可用3个单引号
            原始字符串用r前缀表示，原始字符串的最后一个字符不能为反斜杠,否则python会报错

列表和元组
    列表和元组的主要不同在于，列表是可以修改的，而元组不可以。这意味着列表适用于需要 中途添加元素的情形，而元组适用于出于某种考虑需要禁止修改序列的情形。禁止修改序列通常 出于技术方面的考虑，与Python的内部工作原理相关，这也是有些内置函数返回元组的原因所在。 在你自己编写程序时，几乎在所有情况下都可使用列表来代替元组。一种例外情况是将元组用作 字典键
    元组还可以这样定义：endings = ['st', 'nd', 'rd'] + 17 * ['th'] + ['st', 'nd', 'rd'] + 7 * ['th'] \ + ['st']
    索引：相当于数组下标
    切片：相当于数组的sublist,例如：
        tag = '<a href="http://www.python.org">Python web site</a>'  tag[9:30] = 'http://www.python.org',tag[32:-4]=Python web site
        假设你要访问前述数字列表中的最后三个元素，显然可以明确地指定这一点。
        >>> numbers[7:10] [8, 9, 10]
        在这里，索引10指的是第11个元素:它并不存在，但确实是到达最后一个元素后再前进一步 所处的位置。明白了吗?如果要从列表末尾开始数，可使用负数索引。
        >>> numbers[-3:-1] [8, 9]
        然而，这样好像无法包含最后一个元素。如果使用索引0，即到达列表末尾后再前进一步所 处的位置，结果将如何呢?
        >>> numbers[-3:0] []
        结果并不是你想要的。事实上，执行切片操作时，如果第一个索引指定的元素位于第二个索 引指定的元素后面(在这里，倒数第3个元素位于第1个元素后面)，结果就为空序列。好在你能 使用一种简写:如果切片结束于序列末尾，可省略第二个索引。
        >>> numbers[-3:] [8, 9, 10]
        同样，如果切片始于序列开头，可省略第一个索引。
        >>> numbers[:3] [1, 2, 3]