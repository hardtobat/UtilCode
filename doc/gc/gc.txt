1. gc算法
   1> 标记清除/压缩
   2> 标记复制
   3> 引用计数
2. 垃圾收集器:
   -XX:+UseSerialGC	Serial Garbage Collector 串行垃圾回收器
        最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）
   -XX:+UseParallelGC	Parallel Garbage Collector并行垃圾回收器
        1> ParNew收集器其实就是Serial收集器的多线程版本。新生代复制算法、老年代标记-压缩
        2> 新生代并行，老年代串行；
   -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行
        Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供
   -XX:+UseConcMarkSweepGC	CMS Garbage Collector并发标记垃圾回收器 [响应优先]
        CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。
        从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括：
        初始标记（CMS initial mark） 初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快
        并发标记（CMS concurrent mark） 并发标记阶段就是进行GC Roots Tracing的过程  使用的是Incremental update批量更新算法,在增加引用时的写屏障中触发新的对象引用的标记
        重新标记（CMS remark） 重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。
        并发清除（CMS concurrent sweep）
        由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用 ParNew）

        优点:并发收集、低停顿
        缺点：产生大量空间碎片、并发阶段会降低吞吐量

        -XX:+UseConcMarkSweepGC  使用CMS收集器

        -XX:+UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长
        -XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理
        -XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量） 

   -XX:+UseG1GC	G1 Gargbage Collector 使用G1垃圾回收器[吞吐量优先]
        TLAB(本地线程缓冲区)   PLAB( 晋升本地分配缓冲区)   Collection Sets(CSets)待收集集合   Card Table 卡表  Remembered Sets(RSets)已记忆集合
        G1是目前技术发展的最前沿成果之一，HotSpot开发团队赋予它的使命是未来可以替换掉JDK1.5中发布的CMS收集器。与CMS收集器相比G1收集器有以下特点：
        (1). 空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。
        (2). 可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。
        上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。
        G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象会有短暂停顿。
        收集步骤：
        1)、标记阶段，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)
        2)、Root Region Scanning，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。
        3)、Concurrent Marking，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。使用的是SATB算法。在GC开始时先创建一个对象快照，STAB可以在并发标记时标记所有快照中当时的存活对象。标记过程中新分配的对象也会被标记为存活对象，不会被回收。
        4)、Remark, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。
        5)、Copy/Clean up，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。
        6)、复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。

        可以简单记忆为: 初始标记,并发标记,重新标记,筛选清除

        唯一和串行垃圾回收器不同的是，并行垃圾回收器是使用多线程来进行垃圾回收工作的。

     流行的组合
       Serial
       ParNew + CMS
       ParallelYoung + ParallelOld
       G1GC
     GC ROOT:
         虚拟机栈中的引用对象
         方法区中类静态属性引用的对象
         方法区中常量引用对象
         本地方法栈中JNI引用对象


   /export/local/jdk1.8/bin/java -Dnop -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.library.path=/usr/local/lib -server -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=256m -Djava.awt.headless=true -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Dnetworkaddress.cache.ttl=31 -Dsun.net.inetaddr.ttl=11 -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -Xloggc:/export/log/batman/gc.log -Djdk.tls.ephemeralDHKeySize=2048 -Djava.endorsed.dirs=/export/local/tomcat7/endorsed -classpath /export/local/tomcat7/bin/bootstrap.jar:/export/local/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/export/server/batman -Dcatalina.home=/export/local/tomcat7 -Djava.io.tmpdir=/export/server/batman/temp org.apache.catalina.startup.Bootstrap -config /export/server/batman/conf/server.xml start


https://blog.csdn.net/qq_28674045/article/details/51743922
https://me.csdn.net/iteye_13798